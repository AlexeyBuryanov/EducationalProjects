//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Client.ServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ProcessProps", Namespace="http://schemas.datacontract.org/2004/07/WcfServiceLibrary")]
    [System.SerializableAttribute()]
    public partial class ProcessProps : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BasePriorityField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NonpagedSystemMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PagedMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PagedSystemMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeakPagedMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeakVirtualMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PeakWorkingSet64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PrivateMemorySize64Field;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProcessNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ThreadsField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BasePriority {
            get {
                return this.BasePriorityField;
            }
            set {
                if ((object.ReferenceEquals(this.BasePriorityField, value) != true)) {
                    this.BasePriorityField = value;
                    this.RaisePropertyChanged("BasePriority");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NonpagedSystemMemorySize64 {
            get {
                return this.NonpagedSystemMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.NonpagedSystemMemorySize64Field, value) != true)) {
                    this.NonpagedSystemMemorySize64Field = value;
                    this.RaisePropertyChanged("NonpagedSystemMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PagedMemorySize64 {
            get {
                return this.PagedMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PagedMemorySize64Field, value) != true)) {
                    this.PagedMemorySize64Field = value;
                    this.RaisePropertyChanged("PagedMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PagedSystemMemorySize64 {
            get {
                return this.PagedSystemMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PagedSystemMemorySize64Field, value) != true)) {
                    this.PagedSystemMemorySize64Field = value;
                    this.RaisePropertyChanged("PagedSystemMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeakPagedMemorySize64 {
            get {
                return this.PeakPagedMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PeakPagedMemorySize64Field, value) != true)) {
                    this.PeakPagedMemorySize64Field = value;
                    this.RaisePropertyChanged("PeakPagedMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeakVirtualMemorySize64 {
            get {
                return this.PeakVirtualMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PeakVirtualMemorySize64Field, value) != true)) {
                    this.PeakVirtualMemorySize64Field = value;
                    this.RaisePropertyChanged("PeakVirtualMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PeakWorkingSet64 {
            get {
                return this.PeakWorkingSet64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PeakWorkingSet64Field, value) != true)) {
                    this.PeakWorkingSet64Field = value;
                    this.RaisePropertyChanged("PeakWorkingSet64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PrivateMemorySize64 {
            get {
                return this.PrivateMemorySize64Field;
            }
            set {
                if ((object.ReferenceEquals(this.PrivateMemorySize64Field, value) != true)) {
                    this.PrivateMemorySize64Field = value;
                    this.RaisePropertyChanged("PrivateMemorySize64");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProcessName {
            get {
                return this.ProcessNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProcessNameField, value) != true)) {
                    this.ProcessNameField = value;
                    this.RaisePropertyChanged("ProcessName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionId {
            get {
                return this.SessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionIdField, value) != true)) {
                    this.SessionIdField = value;
                    this.RaisePropertyChanged("SessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Threads {
            get {
                return this.ThreadsField;
            }
            set {
                if ((object.ReferenceEquals(this.ThreadsField, value) != true)) {
                    this.ThreadsField = value;
                    this.RaisePropertyChanged("Threads");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceReference.IServiceWcf")]
    public interface IServiceWcf {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/StartProcess", ReplyAction="http://tempuri.org/IServiceWcf/StartProcessResponse")]
        void StartProcess(string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/StartProcess", ReplyAction="http://tempuri.org/IServiceWcf/StartProcessResponse")]
        System.Threading.Tasks.Task StartProcessAsync(string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/KillProcess", ReplyAction="http://tempuri.org/IServiceWcf/KillProcessResponse")]
        void KillProcess(string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/KillProcess", ReplyAction="http://tempuri.org/IServiceWcf/KillProcessResponse")]
        System.Threading.Tasks.Task KillProcessAsync(string procName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/GetProcesses", ReplyAction="http://tempuri.org/IServiceWcf/GetProcessesResponse")]
        Client.ServiceReference.ProcessProps[] GetProcesses();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IServiceWcf/GetProcesses", ReplyAction="http://tempuri.org/IServiceWcf/GetProcessesResponse")]
        System.Threading.Tasks.Task<Client.ServiceReference.ProcessProps[]> GetProcessesAsync();
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IServiceWcfChannel : Client.ServiceReference.IServiceWcf, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ServiceWcfClient : System.ServiceModel.ClientBase<Client.ServiceReference.IServiceWcf>, Client.ServiceReference.IServiceWcf {
        
        public ServiceWcfClient() {
        }
        
        public ServiceWcfClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ServiceWcfClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWcfClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ServiceWcfClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public void StartProcess(string procName) {
            base.Channel.StartProcess(procName);
        }
        
        public System.Threading.Tasks.Task StartProcessAsync(string procName) {
            return base.Channel.StartProcessAsync(procName);
        }
        
        public void KillProcess(string procName) {
            base.Channel.KillProcess(procName);
        }
        
        public System.Threading.Tasks.Task KillProcessAsync(string procName) {
            return base.Channel.KillProcessAsync(procName);
        }
        
        public Client.ServiceReference.ProcessProps[] GetProcesses() {
            return base.Channel.GetProcesses();
        }
        
        public System.Threading.Tasks.Task<Client.ServiceReference.ProcessProps[]> GetProcessesAsync() {
            return base.Channel.GetProcessesAsync();
        }
    }
}
